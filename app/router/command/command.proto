syntax = "proto3";

package xray.app.router.command;
option csharp_namespace = "Xray.App.Router.Command";
option go_package = "github.com/xtls/xray-core/app/router/command";
option java_package = "com.xray.app.router.command";
option java_multiple_files = true;

import "common/net/network.proto";
import "app/router/config.proto";

// RoutingContext is the context with information relative to routing process.
// It conforms to the structure of xray.features.routing.Context and
// xray.features.routing.Route.
message RoutingContext {
  string InboundTag = 1;
  xray.common.net.Network Network = 2;
  repeated bytes SourceIPs = 3;
  repeated bytes TargetIPs = 4;
  uint32 SourcePort = 5;
  uint32 TargetPort = 6;
  string TargetDomain = 7;
  string Protocol = 8;
  string User = 9;
  map<string, string> Attributes = 10;
  repeated string OutboundGroupTags = 11;
  string OutboundTag = 12;
  string Tag = 13;
}

// SubscribeRoutingStatsRequest subscribes to routing statistics channel if
// opened by xray-core.
// * FieldSelectors selects a subset of fields in routing statistics to return.
// Valid selectors:
//  - inbound: Selects connection's inbound tag.
//  - network: Selects connection's network.
//  - ip: Equivalent as "ip_source" and "ip_target", selects both source and
//  target IP.
//  - port: Equivalent as "port_source" and "port_target", selects both source
//  and target port.
//  - domain: Selects target domain.
//  - protocol: Select connection's protocol.
//  - user: Select connection's inbound user email.
//  - attributes: Select connection's additional attributes.
//  - outbound: Equivalent as "outbound" and "outbound_group", select both
//  outbound tag and outbound group tags.
// * If FieldSelectors is left empty, all fields will be returned.
message SubscribeRoutingStatsRequest {
  repeated string FieldSelectors = 1;
}

// TestRouteRequest manually tests a routing result according to the routing
// context message.
// * RoutingContext is the routing message without outbound information.
// * FieldSelectors selects the fields to return in the routing result. All
// fields are returned if left empty.
// * PublishResult broadcasts the routing result to routing statistics channel
// if set true.
message TestRouteRequest {
  RoutingContext RoutingContext = 1;
  repeated string FieldSelectors = 2;
  bool PublishResult = 3;
}

message AddRoutingRuleRequest{
  xray.app.router.RoutingRule routingRule = 1;
  int32 index = 2;
}

message AddRoutingRuleResponse {}

message AlterRoutingRuleRequest{
  string tag = 1;
  xray.app.router.RoutingRule routingRule = 2;
}
message AlterRoutingRuleResponse {}

message RemoveRoutingRuleRequest{
  string tag = 1;
}
message RemoveRoutingRuleResponse {}

message SetRoutingRulesRequest{
  repeated  xray.app.router.RoutingRule rules = 1;
}

message SetRoutingRulesResponse{
}

message GetRoutingRulesRequest{
}

message GetRoutingRulesResponse{
  repeated  xray.app.router.RoutingRule rules = 1;
}

message GetRoutingRuleRequest{
  string tag = 1;
}

message GetRoutingRuleResponse{
  xray.app.router.RoutingRule rule = 1;
  int32 idx = 2;
}

message AddBalancingRuleRequest{
  xray.app.router.BalancingRule balancing = 1;
}

message AddBalancingRuleResponse {}

message AlterBalancingRuleRequest{
  string tag = 1;
  xray.app.router.BalancingRule balancing = 2;
}
message AlterBalancingRuleResponse {}

message RemoveBalancingRuleRequest{
  string tag = 1;
}
message RemoveBalancingRuleResponse {}

message GetBalancerRequest{
}

message GetBalancerResponse {
  repeated xray.app.router.BalancingRule balancing = 1;
}

service RoutingService {
  rpc SubscribeRoutingStats(SubscribeRoutingStatsRequest) returns (stream RoutingContext) {}
  rpc TestRoute(TestRouteRequest) returns (RoutingContext) {}
  // AddRule When adding a routing rule, make sure that the new rule does not conflict with the API route, otherwise the API will not work properly
  rpc AddRule(AddRoutingRuleRequest) returns (AddRoutingRuleResponse){}
  rpc AlterRule(AlterRoutingRuleRequest) returns (AlterRoutingRuleResponse){}
  rpc RemoveRule(RemoveRoutingRuleRequest) returns (RemoveRoutingRuleResponse){}
  // SetRules Routing rules must be set to ensure that the API route must exist, otherwise the API will not work properly
  rpc SetRules(SetRoutingRulesRequest)returns(SetRoutingRulesResponse){}
  rpc GetRules(GetRoutingRulesRequest)returns(GetRoutingRulesResponse){}
  rpc GetRule(GetRoutingRuleRequest)returns(GetRoutingRuleResponse){}

  rpc AddBalancer(AddBalancingRuleRequest) returns (AddBalancingRuleResponse){}
  rpc AlterBalancer(AlterBalancingRuleRequest) returns (AlterBalancingRuleResponse){}
  rpc RemoveBalancer(RemoveBalancingRuleRequest) returns (RemoveBalancingRuleResponse){}
  rpc GetBalancers(GetBalancerRequest) returns (GetBalancerResponse){}
}

message Config {}
